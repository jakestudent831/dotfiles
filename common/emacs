; -*- mode: Emacs-Lisp -*-
(require 'package)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

(setq package-enable-at-startup nil)

;; Package management {{{
(defun ensure-package-installed (&rest packages)
  "Assure every package is installed, ask for installation if it’s not.

Return a list of installed packages or nil for every skipped package."
  (mapcar
   (lambda (package)
     (if (package-installed-p package)
         nil
       (if (y-or-n-p (format "Package %s is missing. Install it? " package))
           (package-install package)
         package)))
   packages))

;; Make sure to have downloaded archive description.
(or (file-exists-p package-user-dir)
    (package-refresh-contents))

;; Activate installed packages
(package-initialize)

(ensure-package-installed 'auto-complete
                          'color-theme-sanityinc-tomorrow
                          'diff-hl
                          'evil
                          'evil-leader
                          'evil-surround
                          'fill-column-indicator
                          'inf-ruby
                          'haml-mode
                          'helm
                          'helm-ag
                          'helm-projectile
                          'hlinum
                          'js2-mode
                          'magit
                          'monokai-theme
                          'neotree
                          'olivetti
                          'org-bullets
                          'ox-reveal
                          'powerline
                          'powerline-evil
                          'projectile
                          'rainbow-delimiters
                          'rspec-mode
                          'rubocop
                          'scss-mode
                          'smartparens
                          'yaml-mode
                          'yasnippet)
;; }}}

;; Overall settings {{{
(setq make-backup-files nil)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq js-indent-level 2)
(setq scss-indent-level 2)
(setq css-indent-offset 2)
(setq inhibit-startup-message t)
(setq auto-save-default nil)
(setq-default fill-column 80)
(setq create-lockfiles nil)
;; }}}

;; Colorscheme and font {{{
(load-theme 'thomas t)
(set-frame-font "Iosevka 12")
;; }}}

;; GUI elements {{{
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(global-hl-line-mode t)
(setq-default line-spacing 0)
(setq-default cursor-type 'hbar)
(setq-default evil-normal-state-cursor 'hbar)

;; Whitespace
(setq whitespace-style (quote (tabs trailing newline tab-mark newline-mark)))
(setq whitespace-display-mappings
  ;; all numbers are Unicode codepoint in decimal. ⁖ (insert-char 182 1)
  '(
    (space-mark 32 [183] [46])
    (newline-mark 10 [172 10])
    (tab-mark 9 [9656 9] [92 9])
    ))
(global-whitespace-mode t)
(set-face-attribute 'whitespace-newline nil
                    :background nil
                    :foreground "DimGrey")

;; Powerline
;; (powerline-evil-vim-color-theme)
(display-time-mode t)

;; Projectile
(projectile-global-mode t)
(add-to-list 'projectile-globally-ignored-directories "node_modules")

;; Column rule
(setq fci-rule-column 81)
(fci-mode t)

;; Show column number in status bar
(column-number-mode t)

;; Line numbers
(global-linum-mode t)
(hlinum-activate)

;; Autocomplete
(global-auto-complete-mode t)
(add-to-list 'ac-sources 'ac-source-yasnippet)

;; Proper brackets behavior
(electric-pair-mode t)

;; Neotree
(require 'neotree)
(setq-default neo-show-hidden-files t)
(add-hook 'neotree-mode-hook
  (lambda ()
    (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
    (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
    (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
    (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
    (define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
    (define-key evil-normal-state-local-map (kbd "S") 'neotree-enter-horizontal-split)))
;; }}}

;; Helm
(setq helm-ag-use-agignore t)
(setq helm-display-header-line nil)
(require 'helm)
(set-face-attribute 'helm-source-header nil :height 0.1)
(helm-mode t)

;; Org settings
(org-bullets-mode t)

;; Snippets
(yas-global-mode t)

;; Git gutter
(global-diff-hl-mode t)

;; Evil-mode {{{
(require 'evil-leader)
(global-evil-leader-mode 1)
(global-evil-surround-mode 1)
(evil-leader/set-leader ",")

(evil-leader/set-key
  "w" 'save-buffer
  "d" 'kill-this-buffer
  "gs" 'magit-status
  "t" 'helm-projectile
  "m" 'neotree-toggle
  ;; "ev" 'load-file ~/.emacs
  "rs" 'rspec-verify-all
  "v" 'rubocop-check-current-file
  "b" 'switch-to-buffer
  "x" 'helm-M-x
  "a" 'helm-do-ag-project-root
  "<SPC>" 'evil-switch-to-windows-last-buffer
)

(setq evil-want-C-u-scroll t) ;; Force Ctrl+U to scroll half screen up.
(setq evil-want-C-d-scroll t) ;; Force Ctrl+D to scroll half screen bottom.
(setq evil-ex-substitute-global t)

(require 'evil)
(evil-mode t)
;; }}}

;; Default smartparens config
(require 'smartparens-config)

;; Keybindings {{{
(global-set-key (kbd "M-x") 'helm-M-x)
;; }}}

;; Hooks {{{
(add-hook 'prog-mode-hook (lambda ()
                            (turn-on-auto-fill)
                            (fci-mode)
                            (set-fill-column 81)
                            (smartparens-mode t)
                            (rainbow-delimiters-mode t)))

(add-hook 'text-mode-hook (lambda ()
                            (turn-on-auto-fill)
                            (fci-mode)
                            (set-fill-column 81)))

(add-hook 'org-mode-hook (lambda()
                           (org-bullets-mode)
                           (linum-mode 0)
                           (fci-mode 0)
                           (olivetti-mode t)
                           (olivetti-set-width 84)
                           ))

(add-hook 'markdown-mode-hook (lambda()
                                (linum-mode 0)
                                (fci-mode 0)
                                (olivetti-mode t)
                                (olivetti-set-width 84)
                                ))

(add-hook 'before-save-hook 'delete-trailing-whitespace)

(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

(add-hook 'after-init-hook 'inf-ruby-switch-setup)

(add-hook 'ruby-mode-hook (lambda () (hs-minor-mode)))

(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;; }}}

(eval-after-load "hideshow"
  '(add-to-list 'hs-special-modes-alist
    `(ruby-mode
      ,(rx (or "def" "class" "module" "do" "{" "[")) ; Block start
      ,(rx (or "}" "]" "end"))                       ; Block end
      ,(rx (or "#" "=begin"))                        ; Comment start
      ruby-forward-sexp nil)))

;; still need:
;; - hard wrap for specific filetypes
;; - ctags
;; - folds
;; - email (?)
;; - open split from helm-projectile ;; C-c o

;; Emacs auto-generated stuff {{{

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background nil))))
 '(markdown-code-face ((t (:inherit iosevka :background "#11171d")))))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-names-vector
   ["#142229" "#e65b65" "#8ebe8c" "#f4bf75" "#6295ca" "#ab76a6" "#6295ca" "#929ba6"])
 '(ansi-term-color-vector
   [unspecified "#1d1f21" "#cc6666" "#b5bd68" "#f0c674" "#81a2be" "#b294bb" "#81a2be" "#c5c8c6"] t)
 '(custom-safe-themes
   (quote
    ("e9776d12e4ccb722a2a732c6e80423331bcb93f02e089ba2a4b02e85de1cf00e" "15a1c7fcbe7ea041e382e1178b3cc5546c6ae8354a3ab1fadbe3e00481f41bdb" "a800120841da457aa2f86b98fb9fd8df8ba682cebde033d7dbf8077c1b7d677a" "9b59e147dbbde5e638ea1cde5ec0a358d5f269d27bd2b893a0947c4a867e14c1" "b7ccbe01d825f1cc33d88e3b9f3385250f50465bfa930296d40086f37aadc6e9" "097efe7b08c8dbe5938023580385aaf14c2437a2334739b763250f7b59dd9d72" "19244d3da0cbaf41178bf90c9ca0b81943bb9529145427b74adeba229610c94f" "0c9721db5989cff39fd82f89cab4089df75e9bdbb13a43ba60f106845bb24945" "ffa9bd4df0ee5c638fc7b90de4563cf469d24fc1784df5c2bfcfb3ff46a2284d" "d22b218d4da0d945025553d3dbcc94cf42db5e81cb89cecb85b17a321fbf1112" "9a194526cbe7ff6c609bec13d57f256932a0773f0c2cf00f2157cdc65d4d6f9b" "722777ff8ad7c5d735cfd52065a5b1ff5bedf18a1a1e1cc7b0f674db95331b0a" "02ccf63004ba6cf8fde494835b709b8b18d8bddb77c130749d9f5045e89f38dc" "b511d19385a4b7e7ea411cbbc98b6a4a6eade41fa831be63baf73f85786b8766" "82042fee1eb76fcc510818aaa713f7953ec36c1b6e992ddcf551a6eec748cc91" "995d19f24170efbd23fe7a09421b7c06b2998d937451c518031b7d485cf43e55" "c952a3e4b43b3dafba53a83ad87dfb844689927ddbbc7483d4a179fa2db935d1" "2918844d122142dae1d9e4dba5ee5f20e8c9ecaa3fd9d63c947d47bcf6ffa086" "225db56dabd0546daea9778182cce95ac5aea12aadea122ab2059dfbfd915f03" "b1ec8a515103292ece9cc371cac6abef0a2259ed4fcc534f1b4c6e63e58baeb0" "1b8d67b43ff1723960eb5e0cba512a2c7a2ad544ddb2533a90101fd1852b426e" "6df30cfb75df80e5808ac1557d5cc728746c8dbc9bc726de35b15180fa6e0ad9" "590759adc4a5bf7a183df81654cce13b96089e026af67d92b5eec658fb3fe22f" "628278136f88aa1a151bb2d6c8a86bf2b7631fbea5f0f76cba2a0079cd910f7d" "06f0b439b62164c6f8f84fdda32b62fb50b6d00e8b01c2208e55543a6337433a" "40f6a7af0dfad67c0d4df2a1dd86175436d79fc69ea61614d668a635c2cd94ab" "75c0b1d2528f1bce72f53344939da57e290aa34bea79f3a1ee19d6808cb55149" "af214da6d2c72574ededfb50e7985f80ada42b327ed3bffc9b67740fb5e74e58" default)))
 '(initial-frame-alist (quote ((fullscreen . maximized))))
 '(js2-strict-trailing-comma-warning nil)
 '(linum-format (quote "%4d "))
 '(magit-fetch-arguments (quote ("--prune")))
 '(magit-log-arguments (quote ("--graph" "--color" "--decorate" "-n50")))
 '(package-selected-packages
   (quote
    (handlebars-mode js2-mode slim-mode web-mode pug-mode elixir-mode olivetti writeroom-mode auto-org-md yasnippet yaml-mode sublime-themes smartparens scss-mode sass-mode rubocop rspec-mode rainbow-delimiters powerline-evil ox-twbs ox-reveal org-bullets neotree monokai-theme markdown-mode magit-gh-pulls inf-ruby hlinum helm-projectile helm-ag flx-ido fiplr fill-column-indicator evil-visual-mark-mode evil-surround evil-leader diff-hl color-theme-sanityinc-tomorrow coffee-mode auto-complete)))
 '(show-paren-mode t))
 ;; start maximized

;; }}}

;; vim: foldmethod=marker foldmarker={{{,}}}
